{
    "Trie": {
        "prefix": "trie",
        "body": [
            "class TrieNode:",
            "    def __init__(self):",
            "        # you can store data at nodes if you wish",
            "        self.data = None",
            "        self.children = {}",
            "",
            "def fn(words):",
            "    root = TrieNode()",
            "    for word in words:",
            "        curr = root",
            "        for c in word:",
            "            if c not in curr.children:",
            "                curr.children[c] = TrieNode()",
            "            curr = curr.children[c]",
            "        # at this point, you have a full word at curr",
            "        # you can perform more logic here to give curr an attribute if you want",
            "    return root"
        ],
        "description": "Trie data structure"
    },
	"Dynamic Programming": {
        "prefix": "dp",
        "body": [
            "def fn(arr):",
            "    def dp(STATE):",
            "        if BASE_CASE:",
            "            return 0",
            "        ",
            "        if STATE in memo:",
            "            return memo[STATE]",
            "        ",
            "        ans = RECURRENCE_RELATION(STATE)",
            "        memo[STATE] = ans",
            "        return ans",
            "",
            "    memo = {}",
            "    return dp(STATE_FOR_WHOLE_INPUT)"
        ],
        "description": "Dynamic Programming template"
    },
	"Backtracking": {
        "prefix": "backtrack",
        "body": [
            "def backtrack(curr, OTHER_ARGUMENTS...):",
            "    if (BASE_CASE):",
            "        # modify the answer",
            "        return",
            "    ",
            "    ans = 0",
            "    for (ITERATE_OVER_INPUT):",
            "        # modify the current state",
            "        ans += backtrack(curr, OTHER_ARGUMENTS...)",
            "        # undo the modification of the current state",
            "    ",
            "    return ans"
        ],
        "description": "Backtracking template"
    },
	"Binary Search Max": {
        "prefix": "bin_max",
        "body": [
            "def fn(arr):",
            "    def check(x):",
            "        # this function is implemented depending on the problem",
            "        return BOOLEAN",
            "",
            "    left = MINIMUM_POSSIBLE_ANSWER",
            "    right = MAXIMUM_POSSIBLE_ANSWER",
            "    while left <= right:",
            "        mid = (left + right) // 2",
            "        if check(mid):",
            "            left = mid + 1",
            "        else:",
            "            right = mid - 1",
            "    ",
            "    return right"
        ],
        "description": "Binary Search for Maximum"
    },
	"Binary Search Min": {
        "prefix": "bin_min",
        "body": [
            "def fn(arr):",
            "    def check(x):",
            "        # this function is implemented depending on the problem",
            "        return BOOLEAN",
            "",
            "    left = MINIMUM_POSSIBLE_ANSWER",
            "    right = MAXIMUM_POSSIBLE_ANSWER",
            "    while left <= right:",
            "        mid = (left + right) // 2",
            "        if check(mid):",
            "            right = mid - 1",
            "        else:",
            "            left = mid + 1",
            "    ",
            "    return left"
        ],
        "description": "Binary Search for Minimum"
    },
	"Binary Search Right insertion": {
        "prefix": "bin_right",
        "body": [
            "def fn(arr, target):",
            "    left = 0",
            "    right = len(arr)",
            "    while left < right:",
            "        mid = (left + right) // 2",
            "        if arr[mid] > target:",
            "            right = mid",
            "        else:",
            "            left = mid + 1",
            "    ",
            "    return left"
        ],
        "description": "Binary Search Right insertion with duplicates skipping"
    },
	"Binary Search Left": {
        "prefix": "bin_left",
        "body": [
            "def fn(arr, target):",
            "    left = 0",
            "    right = len(arr)",
            "    while left < right:",
            "        mid = (left + right) // 2",
            "        if arr[mid] >= target:",
            "            right = mid",
            "        else:",
            "            left = mid + 1",
            "    ",
            "    return left"
        ],
        "description": "Binary Search insertion before duplicates"
    },
	"Binary Search": {
        "prefix": "bin",
        "body": [
            "def fn(arr, target):",
            "    left = 0",
            "    right = len(arr) - 1",
            "    while left <= right:",
            "        mid = (left + right) // 2",
            "        if arr[mid] == target:",
            "            # do something",
            "            return",
            "        if arr[mid] > target:",
            "            right = mid - 1",
            "        else:",
            "            left = mid + 1",
            "    ",
            "    # left is the insertion point",
            "    return left"
        ],
        "description": "Binary Search"
    },
	"Top K": {
        "prefix": "topk",
        "body": [
            "import heapq",
            "",
            "def fn(arr, k):",
            "    heap = []",
            "    for num in arr:",
            "        # do some logic to push onto heap according to problem's criteria",
            "        heapq.heappush(heap, (CRITERIA, num))",
            "        if len(heap) > k:",
            "            heapq.heappop(heap)",
            "    ",
            "    return [num for num in heap]"
        ],
        "description": "Top K elements"
    },
	"Breadth First Search": {
        "prefix": "bfs",
        "body": [
            "from collections import deque",
            "",
            "def fn(graph):",
            "    queue = deque([START_NODE])",
            "    seen = {START_NODE}",
            "    ans = 0",
            "",
            "    while queue:",
            "        node = queue.popleft()",
            "        # do some logic",
            "        for neighbor in graph[node]:",
            "            if neighbor not in seen:",
            "                seen.add(neighbor)",
            "                queue.append(neighbor)",
            "    ",
            "    return ans"
        ],
        "description": "Breadth First Search"
    },
	"Depth First Search Iterative": {
        "prefix": "dfs_iter",
        "body": [
            "def fn(graph):",
            "    stack = [START_NODE]",
            "    seen = {START_NODE}",
            "    ans = 0",
            "",
            "    while stack:",
            "        node = stack.pop()",
            "        # do some logic",
            "        for neighbor in graph[node]:",
            "            if neighbor not in seen:",
            "                seen.add(neighbor)",
            "                stack.append(neighbor)",
            "    ",
            "    return ans"
        ],
        "description": "Depth First Search Iterative"
    },
	"Depth First Search Recursive": {
        "prefix": "dfs_rec",
        "body": [
            "def fn(graph):",
            "    def dfs(node):",
            "        ans = 0",
            "        # do some logic",
            "        for neighbor in graph[node]:",
            "            if neighbor not in seen:",
            "                seen.add(neighbor)",
            "                ans += dfs(neighbor)",
            "        ",
            "        return ans",
            "",
            "    seen = {START_NODE}",
            "    return dfs(START_NODE)"
        ],
        "description": "Depth First Search Recursive"
    },
	"Tree Breadth First Search": {
        "prefix": "tree_bfs",
        "body": [
            "from collections import deque",
            "",
            "def fn(root):",
            "    queue = deque([root])",
            "    ans = 0",
            "",
            "    while queue:",
            "        current_length = len(queue)",
            "        # do logic for current level",
            "",
            "        for _ in range(current_length):",
            "            node = queue.popleft()",
            "            # do logic",
            "            if node.left:",
            "                queue.append(node.left)",
            "            if node.right:",
            "                queue.append(node.right)",
            "",
            "    return ans"
        ],
        "description": "Tree Breadth First Search"
    },
	"Tree Depth First Search": {
        "prefix": "tree_dfs",
        "body": [
            "def dfs(root):",
            "    stack = [root]",
            "    ans = 0",
            "",
            "    while stack:",
            "        node = stack.pop()",
            "        # do logic",
            "        if node.left:",
            "            stack.append(node.left)",
            "        if node.right:",
            "            stack.append(node.right)",
            "",
            "    return ans"
        ],
        "description": "Tree Depth First Search"
    },
	"Monotonic Stack": {
        "prefix": "monostack",
        "body": [
            "def fn(arr):",
            "    stack = []",
            "    ans = 0",
            "",
            "    for num in arr:",
            "        # for monotonic decreasing, just flip the > to <",
            "        while stack and stack[-1] > num:",
            "            # do logic",
            "            stack.pop()",
            "        stack.append(num)",
            "    ",
            "    return ans"
        ],
        "description": "Monotonic Stack"
    },
	"Reverse Linked List": {
        "prefix": "rev_list",
        "body": [
            "def fn(head):",
            "    curr = head",
            "    prev = None",
            "    while curr:",
            "        next_node = curr.next",
            "        curr.next = prev",
            "        prev = curr",
            "        curr = next_node",
            "    ",
            "    return prev"
        ],
        "description": "Reverse Linked List"
    },
	"Fast and Slow Pointers": {
        "prefix": "fs_list",
        "body": [
            "def fn(head):",
            "    slow = head",
            "    fast = head",
            "    ans = 0",
            "",
            "    while fast and fast.next:",
            "        # do logic",
            "        slow = slow.next",
            "        fast = fast.next.next",
            "    ",
            "    return ans"
        ],
        "description": "Fast and Slow Pointers"
    },
	"Sliding Window": {
        "prefix": "slid_win",
        "body": [
            "def fn(arr):",
            "    left = ans = curr = 0",
            "",
            "    for right in range(len(arr)):",
            "        # do logic here to add arr[right] to curr",
            "",
            "        while WINDOW_CONDITION_BROKEN:",
            "            # remove arr[left] from curr",
            "            left += 1",
            "",
            "        # update ans",
            "    ",
            "    return ans"
        ],
        "description": "Sliding Window"
    },
	"Two Pointers Two Inputs": {
        "prefix": "2p_2in",
        "body": [
            "def fn(arr1, arr2):",
            "    i = j = ans = 0",
            "",
            "    while i < len(arr1) and j < len(arr2):",
            "        # do some logic here",
            "        if CONDITION:",
            "            i += 1",
            "        else:",
            "            j += 1",
            "    ",
            "    while i < len(arr1):",
            "        # do logic",
            "        i += 1",
            "    ",
            "    while j < len(arr2):",
            "        # do logic",
            "        j += 1",
            "    ",
            "    return ans"
        ],
        "description": "Two pointers: two inputs, exhaust both"
    },
	"Two Pointers": {
        "prefix": "2pointer",
        "body": [
            "def fn(arr):",
            "    left = ans = 0",
            "    right = len(arr) - 1",
            "",
            "    while left < right:",
            "        # do some logic here with left and right",
            "        if CONDITION:",
            "            left += 1",
            "        else:",
            "            right -= 1",
            "    ",
            "    return ans"
        ],
        "description": "Two pointers: one input, opposite ends"
    },
	"Dijkstra's Algorithm": {
        "prefix": "dijk",
        "body": [
            "from math import inf",
            "from heapq import *",
            "",
            "distances = [inf] * n",
            "distances[source] = 0",
            "heap = [(0, source)]",
            "",
            "while heap:",
            "    curr_dist, node = heappop(heap)",
            "    if curr_dist > distances[node]:",
            "        continue",
            "    ",
            "    for nei, weight in graph[node]:",
            "        dist = curr_dist + weight",
            "        if dist < distances[nei]:",
            "            distances[nei] = dist",
            "            heappush(heap, (dist, nei))"
        ],
        "description": "Dijkstra's Algorithm"
    }

}